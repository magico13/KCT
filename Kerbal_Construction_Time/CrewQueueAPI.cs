using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using UnityEngine;

// Include this file in your project in order to support a soft-dependency on CrewQ.
// Do not edit this file.
// Example usage: CrewQ.API.SuppressCrew()
namespace CrewQueue
{
    public class API
    {
        private static bool? _available = null;
        private static Type _type = null;
        private static object _instance;

        /// <summary>
        /// This indicates if CrewQ is loaded
        /// </summary>
        public static bool Available
        {
            get
            {
                if (_available == null)
                {
                    _type = AssemblyLoader.loadedAssemblies
                                          .Select(a => a.assembly.GetExportedTypes())
                                          .SelectMany(t => t)
                                          .FirstOrDefault(t => t.FullName == "CrewQueue.CrewQueue");

                    _available = _type != null;
                }
                return (bool)_available;
            }
        }        

        /// <summary>
        /// Returns the Kerbals who are allowed to go on missions, unsorted.
        /// </summary>
        public static IEnumerable<ProtoCrewMember> AvailableCrew
        {
            get
            {                
                return (IEnumerable<ProtoCrewMember>) getProperty("CrewQueueRoster", "AvailableCrew");          
            }
        }

        /// <summary>
        /// Returns the Kerbals who are not allowed to go on missions.
        /// </summary>
        public static IEnumerable<ProtoCrewMember> UnavailableCrew
        {
            get
            {
                return (IEnumerable<ProtoCrewMember>) getProperty("CrewQueueRoster", "UnavailableCrew");
            }
        }

        /// <summary>
        /// Returns the Kerbals who are allowed to go on missions, sorted inexperienced first.
        /// </summary>
        public static IOrderedEnumerable<ProtoCrewMember> NewbieCrew
        {
            get
            {
                return (IOrderedEnumerable<ProtoCrewMember>)getProperty("CrewQueueRoster", "LeastExperiencedCrew");
            }
        }

        /// <summary>
        /// Returns the Kerbals who are allowed to go on missions, sorted veterans first.
        /// </summary>
        public static IOrderedEnumerable<ProtoCrewMember> VeteranCrew
        {
            get
            {
                return (IOrderedEnumerable<ProtoCrewMember>)getProperty("CrewQueueRoster", "MostExperiencedCrew");
            }
        }

        /// <summary>
        /// Obtains a group of crew for the specified part
        /// </summary>
        /// <param name="partPrefab">A reference to the Part in question.</param>
        /// <param name="preferVeterans">Check if veterans should be prioritized over newbies</param>
        /// <returns></returns>
        public IEnumerable<ProtoCrewMember> GetCrewForPart(Part partPrefab, bool preferVeterans = false)
        {
            return (IEnumerable<ProtoCrewMember>) invokeMethod("CrewQueue","GetCrewForPart", new object[] { partPrefab, preferVeterans });
        }

        // Generic accessors
        internal static object Instance
        {
            get
            {
                if (Available && _instance == null)
                {
                    _instance = _type.GetProperty("Instance").GetValue(null, null);
                    return _instance;
                }
                else
                {
                    throw new Exception("Attempted to access CrewQ without that mod installed.");
                }
            }
        }

        internal static object getProperty(string target, string name, object[] indexes = null)
        {
            if (Available)
            {
                Type type = AssemblyLoader.loadedAssemblies
                                          .Select(a => a.assembly.GetExportedTypes())
                                          .SelectMany(t => t)
                                          .FirstOrDefault(t => t.FullName == "CrewQueue." + target);

                System.Reflection.PropertyInfo _property = type.GetProperty(name, BindingFlags.NonPublic | BindingFlags.Instance);
                return _property.GetValue(Instance, indexes);
            }
            else
            {
                throw new Exception("Attempted to access CrewQ without that mod installed.");
            }
        }

        internal static object invokeMethod(string target, string name, object[] parameters = null)
        {
            if (Available)
            {
                Type type = AssemblyLoader.loadedAssemblies
                                          .Select(a => a.assembly.GetExportedTypes())
                                          .SelectMany(t => t)
                                          .FirstOrDefault(t => t.FullName == "CrewQueue." + target);

                MethodInfo _method = type.GetMethod(name, BindingFlags.NonPublic | BindingFlags.Instance);
                return _method.Invoke(Instance, parameters);
            }
            else
            {
                throw new Exception("Attempted to access CrewQ without that mod installed.");
            }
        }
    }
}